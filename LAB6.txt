Lab 6
import tensorflow as tf
import numpy as np
import cv2
import PIL.Image as Image
import os
import matplotlib.pyplot as plt
import tensorflow_hub as hub
import pathlib

------------------------------------------------------------
Image_Shape = (224,224)
-----------------------------------------------------------
URL_dataset = https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz

----------------------------------------------------------------

data_dir = tf.keras.utils.get_file(origin = URL_dataset, fname='flower_photos' ,untar= True)

-------------------------------------------------------------------

data_dir = pathlib.Path(data_dir)
image_count = len(list(data_dir.glob('*/*.jpg')))
print(image_count)
------------------------------------------------------------------
'''data_dir = pathlib.Path(data_dir)
file_list = list(data_dir.glob('*/*.jpg'))
half_file_list = file_list[:len(file_list) // 2]
#image_count = len(list(data_dir.glob('*/*.jpg')))
image_count = len(half_file_list)
print(image_count)'''

-----------------------------------------------------------------------
flowers_images_dict = {"daisy" : list(data_dir.glob('daisy/*')),
                      "dandelion" : list(data_dir.glob('dandelion/*')),
                      "roses" : list(data_dir.glob('roses/*')),
                      "sunflowers" : list(data_dir.glob('sunflowers/*')),
                      "tulips" : list(data_dir.glob('tulips/*'))}

flowers_labels_dict = {"daisy" : 0,
                       "dandelion" : 1,
                       "roses" : 2,
                       "sunflowers" : 3,
                       "tulips" : 4}

X, Y = [],[]

for flower_name, images in flowers_images_dict.items():
  for image in images:
    img = cv2.imread(str(image))
    resized_img = cv2.resize(img, Image_Shape)
    X.append(resized_img)
    Y.append(flowers_labels_dict[flower_name])
X = np.array(X)
Y = np.array(Y)

-----------------------------------------------------------------------------
from sklearn.model_selection import train_test_split

---------------------------------------------------------------------------
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, random_state=0)
X_train_scaled = X_train/255
X_test_scaled = X_test/255

-----------------------------------------------------------------------------
## 1)Load a Pretrained CNN Model:
tf_model = https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4
-----------------------------------------------------------------------------
classifier = tf.keras.Sequential([hub.KerasLayer(tf_model, input_shape = (224,224,3), trainable=False),
tf.keras.layers.Dense(len(flowers_labels_dict), activation = "softmax")])

------------------------------------------------------------------------------------------------------------------------------------



# 2)Compile the Model:
classifier.summary()
classifier.compile(optimizer="adam",
loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
metrics=["accuracy"])
-------------------------------------------------------------------------------------------------------------------------------
## 3)Training the Model
classifier.fit(X_test_scaled, Y_test, epochs = 5)
#classifier.evaluate(X_test_scaled, Y_test)
---------------------------------------------------------------------------------------------------------------------------------
# 4)Model Evaluation:
classifier.evaluate(X_test_scaled, Y_test)

roses = list(data_dir.glob('roses/*'))
Image.open(str(roses[0]))

tulips = list(data_dir.glob('tulips/*'))
img=Image.open(str(tulips[6]))
img
------------------------------------------------------------------------
# 5)Making Predictions:
img = tf.keras.preprocessing.image.img_to_array(img.resize(Image_Shape))
img = np.array([img])

res = classifier.predict(img)

-----------------------------------------------------------------------------
# 6)Print Prediction:

print("The prediction is : {}".format(list(flowers_labels_dict.keys())[np.argmax(res)]))
